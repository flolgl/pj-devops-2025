Started by user flo
Obtained Jenkinsfile from git https://github.com/flolgl/pj-devops-2025
[Pipeline] Start of Pipeline
[Pipeline] node
Running on jenkins-slave in /home/user/jenkins/workspace/pj-go
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
Fetching changes from the remote Git repository
Checking out Revision e842ff8cf39eba2d2af39b65bfec3356b6c9c329 (refs/remotes/origin/main)
Commit message: "Changed node port for prod"
 > git rev-parse --resolve-git-dir /home/user/jenkins/workspace/pj-go/.git # timeout=10
 > git config remote.origin.url https://github.com/flolgl/pj-devops-2025 # timeout=10
Fetching upstream changes from https://github.com/flolgl/pj-devops-2025
 > git --version # timeout=10
 > git --version # 'git version 2.39.5'
 > git fetch --tags --force --progress -- https://github.com/flolgl/pj-devops-2025 +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
 > git config core.sparsecheckout # timeout=10
 > git checkout -f e842ff8cf39eba2d2af39b65bfec3356b6c9c329 # timeout=10
 > git rev-list --no-walk 6f7c67c0f689121867383c942c867dec7c650708 # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Clone repo)
[Pipeline] git
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
using credential git_credentials
Fetching changes from the remote Git repository
Checking out Revision e842ff8cf39eba2d2af39b65bfec3356b6c9c329 (refs/remotes/origin/main)
Commit message: "Changed node port for prod"
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Start Minikube & build docker image)
[Pipeline] script
[Pipeline] {
[Pipeline] sh
+ minikube start --driver=docker
* minikube v1.31.2 on Debian 12.8 (vbox/amd64)
* Using the docker driver based on existing profile
 > git rev-parse --resolve-git-dir /home/user/jenkins/workspace/pj-go/.git # timeout=10
 > git config remote.origin.url https://github.com/flolgl/pj-devops-2025 # timeout=10
Fetching upstream changes from https://github.com/flolgl/pj-devops-2025
 > git --version # timeout=10
 > git --version # 'git version 2.39.5'
using GIT_ASKPASS to set credentials Git credentials
 > git fetch --tags --force --progress -- https://github.com/flolgl/pj-devops-2025 +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
 > git config core.sparsecheckout # timeout=10
 > git checkout -f e842ff8cf39eba2d2af39b65bfec3356b6c9c329 # timeout=10
 > git branch -a -v --no-abbrev # timeout=10
 > git branch -D main # timeout=10
 > git checkout -b main e842ff8cf39eba2d2af39b65bfec3356b6c9c329 # timeout=10
* Starting control plane node minikube in cluster minikube
* Pulling base image ...
* Updating the running docker "minikube" container ...

X Docker is nearly out of disk space, which may cause deployments to fail! (92% of capacity). You can pass '--force' to skip this check.
* Suggestion:

    Try one or more of the following to free up space on the device:

    1. Run "docker system prune" to remove unused Docker data (optionally with "-a")
    2. Increase the storage allocated to Docker for Desktop by clicking on:
    Docker icon > Preferences > Resources > Disk Image Size
    3. Run "minikube ssh -- docker system prune" if using the Docker container runtime
* Related issue: https://github.com/kubernetes/minikube/issues/9024

* Preparing Kubernetes v1.27.4 on Docker 24.0.4 ...
* Verifying Kubernetes components...
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
* Enabled addons: storage-provisioner, default-storageclass
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default
+ minikube docker-env
+ eval export DOCKER_TLS_VERIFY="1" export DOCKER_HOST="tcp://192.168.76.2:2376" export DOCKER_CERT_PATH="/home/user/.minikube/certs" export MINIKUBE_ACTIVE_DOCKERD="minikube" # To point your shell to minikube's docker-daemon, run: # eval $(minikube -p minikube docker-env)
+ export DOCKER_TLS_VERIFY=1 export DOCKER_HOST=tcp://192.168.76.2:2376 export DOCKER_CERT_PATH=/home/user/.minikube/certs export MINIKUBE_ACTIVE_DOCKERD=minikube
+ docker build -t go-pj:latest .
#0 building with "default" instance using docker driver

#1 [internal] load .dockerignore
#1 transferring context: 2B 0.0s done
#1 DONE 0.1s

#2 [internal] load build definition from Dockerfile
#2 transferring dockerfile: 137B 0.0s done
#2 DONE 0.2s

#3 [internal] load metadata for docker.io/library/golang:1.21
#3 DONE 1.3s

#4 [1/4] FROM docker.io/library/golang:1.21@sha256:4746d26432a9117a5f58e95cb9f954ddf0de128e9d5816886514199316e4a2fb
#4 DONE 0.0s

#5 [internal] load build context
#5 transferring context: 94B 0.0s done
#5 DONE 0.1s

#6 [2/4] WORKDIR /app
#6 CACHED

#7 [3/4] COPY ./webapi .
#7 CACHED

#8 [4/4] RUN go build -o main .
#8 CACHED

#9 exporting to image
#9 exporting layers done
#9 writing image sha256:adf3160f1675d2b3bc0dd39bde1d4ca6ed32ea285d5face158fcb5e2d759f7c5 0.0s done
#9 naming to docker.io/library/go-pj:latest 0.0s done
#9 DONE 0.0s
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy to dev environment and create namespace)
[Pipeline] script
[Pipeline] {
[Pipeline] sh
+ kubectl create -f kubernetes/namespace-dev.yaml
Error from server (AlreadyExists): error when creating "kubernetes/namespace-dev.yaml": namespaces "development" already exists
+ echo namespace already exists
namespace already exists
+ kubectl apply -f kubernetes/deploy-dev.yaml
deployment.apps/go-pj-development-deployment unchanged
+ kubectl apply -f kubernetes/service-dev.yaml
service/go-pj-development-service unchanged
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Test)
[Pipeline] script
[Pipeline] {
[Pipeline] sh
+ minikube ip
+ curl -sLI -w %{http_code} http://192.168.76.2:31081/whoami -o /dev/null
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy to prod environment and create namespace)
[Pipeline] script
[Pipeline] {
[Pipeline] sh
+ kubectl create -f kubernetes/namespace-prod.yaml
Error from server (AlreadyExists): error when creating "kubernetes/namespace-prod.yaml": namespaces "production" already exists
+ echo namespace already exists
namespace already exists
+ kubectl apply -f kubernetes/deploy-prod.yaml
deployment.apps/go-pj-production-deployment unchanged
+ kubectl apply -f kubernetes/service-prod.yaml
service/go-pj-production-service created
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
